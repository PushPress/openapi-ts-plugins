// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type {
  ListUsersData,
  ListUsersResponses,
  ListUsersErrors,
  CreateUserData,
  CreateUserResponses,
  CreateUserErrors,
  DeleteUserData,
  DeleteUserResponses,
  DeleteUserErrors,
  GetUserByIdData,
  GetUserByIdResponses,
  GetUserByIdErrors,
  UpdateUserData,
  UpdateUserResponses,
  UpdateUserErrors,
  GetUserPostsData,
  GetUserPostsResponses,
  GetUserPostsErrors,
  CreatePostData,
  CreatePostResponses,
  CreatePostErrors,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List users
 * Retrieve a list of users with optional filtering
 */
export const listUsers = <ThrowOnError extends boolean = true>(
  options?: Options<ListUsersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListUsersResponses,
    ListUsersErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/users',
    ...options,
  });
};

/**
 * Create user
 * Create a new user
 */
export const createUser = <ThrowOnError extends boolean = true>(
  options: Options<CreateUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserResponses,
    CreateUserErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete user
 * Delete a user by ID
 */
export const deleteUser = <ThrowOnError extends boolean = true>(
  options: Options<DeleteUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserResponses,
    DeleteUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/users/{userId}',
    ...options,
  });
};

/**
 * Get user by ID
 * Retrieve a specific user by their ID
 */
export const getUserById = <ThrowOnError extends boolean = true>(
  options: Options<GetUserByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserByIdResponses,
    GetUserByIdErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/users/{userId}',
    ...options,
  });
};

/**
 * Update user
 * Update an existing user
 */
export const updateUser = <ThrowOnError extends boolean = true>(
  options: Options<UpdateUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateUserResponses,
    UpdateUserErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/users/{userId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get user posts
 * Retrieve all posts for a specific user
 */
export const getUserPosts = <ThrowOnError extends boolean = true>(
  options: Options<GetUserPostsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserPostsResponses,
    GetUserPostsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/users/{userId}/posts',
    ...options,
  });
};

/**
 * Create post
 * Create a new post
 */
export const createPost = <ThrowOnError extends boolean = true>(
  options: Options<CreatePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePostResponses,
    CreatePostErrors,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
    ],
    url: '/posts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};
