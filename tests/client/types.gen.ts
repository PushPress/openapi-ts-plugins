// This file is auto-generated by @hey-api/openapi-ts

export type User = {
  /**
   * Unique identifier for the user
   */
  id: string;
  /**
   * User's email address
   */
  email: string;
  /**
   * User's full name
   */
  name: string;
  /**
   * URL to user's avatar image
   */
  avatar?: string | null;
  /**
   * Current status of the user
   */
  status: 'active' | 'inactive' | 'pending';
  /**
   * Additional user metadata
   */
  metadata?: {
    [key: string]: unknown;
  } | null;
  /**
   * User creation timestamp
   */
  createdAt: string;
  /**
   * Last update timestamp
   */
  updatedAt?: string | null;
};

export type CreateUserRequest = {
  /**
   * User's email address
   */
  email: string;
  /**
   * User's full name
   */
  name: string;
  /**
   * URL to user's avatar image
   */
  avatar?: string | null;
  /**
   * Additional user metadata
   */
  metadata?: {
    [key: string]: unknown;
  } | null;
};

export type UpdateUserRequest = {
  /**
   * User's full name
   */
  name?: string;
  /**
   * URL to user's avatar image
   */
  avatar?: string | null;
  /**
   * Current status of the user
   */
  status?: 'active' | 'inactive' | 'pending';
  /**
   * Additional user metadata
   */
  metadata?: {
    [key: string]: unknown;
  } | null;
};

export type Post = {
  /**
   * Unique identifier for the post
   */
  id: string;
  /**
   * Post title
   */
  title: string;
  /**
   * Post content
   */
  content: string;
  /**
   * ID of the post author
   */
  authorId: string;
  /**
   * Whether the post is published
   */
  published: boolean;
  /**
   * List of tags associated with the post
   */
  tags?: Array<string>;
  /**
   * Post creation timestamp
   */
  createdAt: string;
  /**
   * Last update timestamp
   */
  updatedAt?: string | null;
};

export type CreatePostRequest = {
  /**
   * Post title
   */
  title: string;
  /**
   * Post content
   */
  content: string;
  /**
   * ID of the post author
   */
  authorId: string;
  /**
   * Whether the post is published
   */
  published?: boolean;
  /**
   * List of tags associated with the post
   */
  tags?: Array<string>;
};

export type _Error = {
  /**
   * Error code
   */
  code: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Error tag for discrimination
   */
  tag: string;
  /**
   * Additional error details
   */
  details?: {
    [key: string]: unknown;
  } | null;
};

export type BadRequestError = {
  /**
   * Error code
   */
  code: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Error tag for discrimination
   */
  tag: string;
  /**
   * Additional error details
   */
  details?: {
    [key: string]: unknown;
  } | null;
};

export type NotFoundError = {
  /**
   * Error code
   */
  code: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Error tag for discrimination
   */
  tag: string;
  /**
   * Additional error details
   */
  details?: {
    [key: string]: unknown;
  } | null;
};

export type ConflictError = {
  /**
   * Error code
   */
  code: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Error tag for discrimination
   */
  tag: string;
  /**
   * Additional error details
   */
  details?: {
    [key: string]: unknown;
  } | null;
};

export type InternalServerError = {
  /**
   * Error code
   */
  code: string;
  /**
   * Human-readable error message
   */
  message: string;
  /**
   * Error tag for discrimination
   */
  tag: string;
  /**
   * Additional error details
   */
  details?: {
    [key: string]: unknown;
  } | null;
};

export type ListUsersData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Maximum number of users to return
     */
    limit?: number;
    /**
     * Number of users to skip
     */
    offset?: number;
    /**
     * Filter users by status
     */
    status?: 'active' | 'inactive' | 'pending';
  };
  url: '/users';
};

export type ListUsersErrors = {
  /**
   * Bad request
   */
  400: BadRequestError;
  /**
   * Internal server error
   */
  500: InternalServerError;
};

export type ListUsersError = ListUsersErrors[keyof ListUsersErrors];

export type ListUsersResponses = {
  /**
   * Successful response
   */
  200: {
    users: Array<User>;
    /**
     * Total number of users
     */
    total?: number;
    /**
     * Whether there are more users available
     */
    hasMore?: boolean;
  };
};

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses];

export type CreateUserData = {
  body: CreateUserRequest;
  path?: never;
  query?: never;
  url: '/users';
};

export type CreateUserErrors = {
  /**
   * Bad request
   */
  400: BadRequestError;
  /**
   * User already exists
   */
  409: ConflictError;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
  /**
   * User created successfully
   */
  201: User;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type DeleteUserData = {
  body?: never;
  path: {
    /**
     * The user ID
     */
    userId: string;
  };
  query?: never;
  url: '/users/{userId}';
};

export type DeleteUserErrors = {
  /**
   * User not found
   */
  404: NotFoundError;
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
  /**
   * User deleted successfully
   */
  204: void;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type GetUserByIdData = {
  body?: never;
  path: {
    /**
     * The user ID
     */
    userId: string;
  };
  query?: never;
  url: '/users/{userId}';
};

export type GetUserByIdErrors = {
  /**
   * User not found
   */
  404: NotFoundError;
};

export type GetUserByIdError = GetUserByIdErrors[keyof GetUserByIdErrors];

export type GetUserByIdResponses = {
  /**
   * Successful response
   */
  200: User;
};

export type GetUserByIdResponse =
  GetUserByIdResponses[keyof GetUserByIdResponses];

export type UpdateUserData = {
  body: UpdateUserRequest;
  path: {
    /**
     * The user ID
     */
    userId: string;
  };
  query?: never;
  url: '/users/{userId}';
};

export type UpdateUserErrors = {
  /**
   * Bad request
   */
  400: BadRequestError;
  /**
   * User not found
   */
  404: NotFoundError;
};

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors];

export type UpdateUserResponses = {
  /**
   * User updated successfully
   */
  200: User;
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type GetUserPostsData = {
  body?: never;
  path: {
    /**
     * The user ID
     */
    userId: string;
  };
  query?: {
    /**
     * Filter by published status
     */
    published?: boolean;
  };
  url: '/users/{userId}/posts';
};

export type GetUserPostsErrors = {
  /**
   * User not found
   */
  404: NotFoundError;
};

export type GetUserPostsError = GetUserPostsErrors[keyof GetUserPostsErrors];

export type GetUserPostsResponses = {
  /**
   * Successful response
   */
  200: Array<Post>;
};

export type GetUserPostsResponse =
  GetUserPostsResponses[keyof GetUserPostsResponses];

export type CreatePostData = {
  body: CreatePostRequest;
  path?: never;
  query?: never;
  url: '/posts';
};

export type CreatePostErrors = {
  /**
   * Bad request
   */
  400: BadRequestError;
  /**
   * Author not found
   */
  404: NotFoundError;
  /**
   * Internal server error
   */
  500: InternalServerError;
};

export type CreatePostError = CreatePostErrors[keyof CreatePostErrors];

export type CreatePostResponses = {
  /**
   * Post created successfully
   */
  201: Post;
};

export type CreatePostResponse = CreatePostResponses[keyof CreatePostResponses];

export type ClientOptions = {
  baseURL:
    | 'https://api.testservice.com/v1'
    | 'https://staging-api.testservice.com/v1'
    | (string & {});
};
