// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

export const zUser = z.object({
  id: z.uuid(),
  email: z.email(),
  name: z.string().min(1).max(100),
  avatar: z.optional(z.union([z.url(), z.null()])),
  status: z.enum(["active", "inactive", "pending"]),
  metadata: z.optional(z.union([z.object({}), z.null()])),
  createdAt: z.iso.datetime(),
  updatedAt: z.optional(z.union([z.iso.datetime(), z.null()])),
});

export const zCreateUserRequest = z.object({
  email: z.email(),
  name: z.string().min(1).max(100),
  avatar: z.optional(z.union([z.url(), z.null()])),
  metadata: z.optional(z.union([z.object({}), z.null()])),
});

export const zUpdateUserRequest = z.object({
  name: z.optional(z.string().min(1).max(100)),
  avatar: z.optional(z.union([z.url(), z.null()])),
  status: z.optional(z.enum(["active", "inactive", "pending"])),
  metadata: z.optional(z.union([z.object({}), z.null()])),
});

export const zPost = z.object({
  id: z.uuid(),
  title: z.string().min(1).max(200),
  content: z.string(),
  authorId: z.uuid(),
  published: z.boolean(),
  tags: z.optional(z.array(z.string())),
  createdAt: z.iso.datetime(),
  updatedAt: z.optional(z.union([z.iso.datetime(), z.null()])),
});

export const zCreatePostRequest = z.object({
  title: z.string().min(1).max(200),
  content: z.string(),
  authorId: z.uuid(),
  published: z.optional(z.boolean()).default(false),
  tags: z.optional(z.array(z.string())),
});

export const zError = z.object({
  code: z.string(),
  message: z.string(),
  tag: z.string(),
  details: z.optional(z.union([z.object({}), z.null()])),
});

export const zBadRequestError = z.object({
  code: z.string(),
  message: z.string(),
  tag: z.string(),
  details: z.optional(z.union([z.object({}), z.null()])),
});

export const zNotFoundError = z.object({
  code: z.string(),
  message: z.string(),
  tag: z.string(),
  details: z.optional(z.union([z.object({}), z.null()])),
});

export const zConflictError = z.object({
  code: z.string(),
  message: z.string(),
  tag: z.string(),
  details: z.optional(z.union([z.object({}), z.null()])),
});

export const zInternalServerError = z.object({
  code: z.string(),
  message: z.string(),
  tag: z.string(),
  details: z.optional(z.union([z.object({}), z.null()])),
});

export const zListUsersData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      limit: z.optional(z.int().gte(1).lte(100)).default(20),
      offset: z.optional(z.int().gte(0)).default(0),
      status: z.optional(z.enum(["active", "inactive", "pending"])),
    }),
  ),
});

/**
 * Successful response
 */
export const zListUsersResponse = z.object({
  users: z.array(zUser).default([]),
  total: z.optional(z.int()),
  hasMore: z.optional(z.boolean()),
});

export const zCreateUserData = z.object({
  body: zCreateUserRequest,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * User created successfully
 */
export const zCreateUserResponse = zUser;

export const zDeleteUserData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    userId: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * User deleted successfully
 */
export const zDeleteUserResponse = z.void();

export const zGetUserByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    userId: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful response
 */
export const zGetUserByIdResponse = zUser;

export const zUpdateUserData = z.object({
  body: zUpdateUserRequest,
  path: z.object({
    userId: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * User updated successfully
 */
export const zUpdateUserResponse = zUser;

export const zGetUserPostsData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    userId: z.uuid(),
  }),
  query: z.optional(
    z.object({
      published: z.optional(z.boolean()),
    }),
  ),
});

/**
 * Successful response
 */
export const zGetUserPostsResponse = z.array(zPost);

export const zCreatePostData = z.object({
  body: zCreatePostRequest,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Post created successfully
 */
export const zCreatePostResponse = zPost;
